{"remainingRequest":"/home/bezhan/Desktop/package/tradix/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bezhan/Desktop/package/tradix/src/views/Dashboard/Index.vue?vue&type=template&id=5adb22a6","dependencies":[{"path":"/home/bezhan/Desktop/package/tradix/src/views/Dashboard/Index.vue","mtime":1619430358000},{"path":"/home/bezhan/Desktop/package/tradix/node_modules/cache-loader/dist/cjs.js","mtime":1738841506326},{"path":"/home/bezhan/Desktop/package/tradix/node_modules/cache-loader/dist/cjs.js","mtime":1738841506326},{"path":"/home/bezhan/Desktop/package/tradix/node_modules/babel-loader/lib/index.js","mtime":1738841508401},{"path":"/home/bezhan/Desktop/package/tradix/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1738841510219},{"path":"/home/bezhan/Desktop/package/tradix/node_modules/cache-loader/dist/cjs.js","mtime":1738841506326},{"path":"/home/bezhan/Desktop/package/tradix/node_modules/vue-loader/lib/index.js","mtime":1738841508928}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}